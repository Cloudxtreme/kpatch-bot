#!/bin/bash

SMATCH_PATH="${SMATCH_PATH:-$HOME/smatch}"
SMATCH="$SMATCH_PATH/smatch"
SPARSE="$SMATCH_PATH/sparse"
NEW_BUGS="$SMATCH_PATH/smatch_scripts/new_bugs.sh"

function cleanup {
	rm -f smatch.old smatch.new sparse.old sparse.old
	make -s clean
	[[ ! -z "$git_start" ]] && git checkout $git_start
}
trap cleanup EXIT

# Sanity check
#
[[ ! -e $SMATCH ]] && echo "$SMATCH not found!" && exit 127
[[ ! -e $SPARSE ]] && echo "$SPARSE not found!" && exit 127
[[ ! -e $NEW_BUGS ]] && echo "$NEW_BUGS not found!" && exit 127

cleanup

git_start=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
branch_commits=($(git log --oneline remotes/origin/master.. | awk '{print $1}' | tac))
[[ ${#branch_commits[@]} -eq 0 ]] && exit

git checkout --quiet ${branch_commits[0]}~1

error=0
for commit in master ${branch_commits[@]}; do

	# Clean up, checkout commit N
	make -s clean
	git checkout --quiet $commit
	git show $commit | awk '/^diff --git/ {exit} {print}'  # simulate --no-patch
	echo

	# Ordinary build (show 'silent' make output)
	#
	make -s 2>&1
	[[ $? -ne 0 ]] && error=1

	# Smatch build (show only new bugs)
	#
	if [[ -x "$SMATCH" ]]; then
		make -s clean
		make -s CHECK="$SMATCH --full-path" C=1 &> smatch.new
		if [[ -e smatch.old ]] ; then
			new=$($NEW_BUGS smatch.new smatch.old)
			[[ ! -z $new ]] && error=1 && echo -e "New smatch warning(s):\n$new\n" 1>&2
		fi
		mv smatch.new smatch.old
	fi

	# Sparse build (show only new bugs)
	#
	if [[ -x "$SPARSE" ]]; then
		make -s clean
		make -s CHECK="$SPARSE --full-path" C=1 &> sparse.new
		if [[ -e sparse.old ]] ; then
			new=$($NEW_BUGS sparse.new sparse.old)
			[[ ! -z $new ]] && error=1 && echo -e "New sparse warning(s):\n$new\n" 1>&2
		fi
		mv sparse.new sparse.old
	fi

done

exit $error
